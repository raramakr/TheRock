name: Build Windows Packages

on:
  workflow_dispatch:
    inputs:
      package_version:
        type: string
        default: ADHOCBUILD
      amdgpu_families:
        type: string
        default: gfx1151
      expect_failure:
        type: boolean
      extra_cmake_options:
        type: string

  workflow_call:
    inputs:
      package_version:
        type: string
        default: ADHOCBUILD
      amdgpu_families:
        type: string
      expect_failure:
        type: boolean
      extra_cmake_options:
        type: string

permissions:
  contents: read

jobs:
  build_windows_packages:
    name: Build Windows Packages (xfail ${{ inputs.expect_failure }})
    runs-on: azure-windows-scale-rocm
    continue-on-error: ${{ inputs.expect_failure }}
    permissions:
      id-token: write
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: true
    env:
      BUILD_DIR: B:\build
      CACHE_DIR: "${{github.workspace}}/.cache"
      CCACHE_DIR: "${{github.workspace}}/.cache/ccache"
      CCACHE_MAXSIZE: "4000M"
      TEATIME_FORCE_INTERACTIVE: 0
      AMDGPU_FAMILIES: ${{ inputs.amdgpu_families }}
      IS_PR_FROM_FORK: ${{ github.event.pull_request.head.repo.fork }}
    steps:
      - name: "Checking out repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.12"

      - name: Install python deps
        run: |
          pip install -r requirements.txt

      - name: Install requirements
        run: |
          choco install --no-progress -y ccache
          # ninja pinned due to a bug in the 1.13.0 release:
          # https://github.com/ninja-build/ninja/issues/2616
          choco install --no-progress -y ninja --version 1.12.1
          choco install --no-progress -y strawberryperl
          echo "$PATH;C:\Strawberry\c\bin" >> $GITHUB_PATH
          choco install --no-progress -y awscli
          echo "$PATH;C:\Program Files\Amazon\AWSCLIV2" >> $GITHUB_PATH

      - uses: iterative/setup-dvc@4bdfd2b0f6f1ad7e08afadb03b1a895c352a5239 # v2.0.0
        with:
          version: '3.62.0'

      # After other installs, so MSVC get priority in the PATH.
      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0

      - name: Runner health status
        run: |
          df -h
          echo "CCACHE_DIR=${CCACHE_DIR}"
          mkdir -p $CCACHE_DIR
          ccache --zero-stats
          ccache -s -v

          echo "cmake: $(which cmake)"
          cmake --version
          echo "ninja: $(which ninja)"
          ninja --version
          echo "CC: $CC"
          echo "CXX: $CXX"

          echo "Installed Python versions:"
          echo "python: $(which python), python3: $(which python3)"
          python --version
          pip list --format=freeze

          echo "gcc: $(which gcc)"
          gcc --version
          echo "perl: $(which perl)"
          perl --version
          echo "gfortran: $(which gfortran)"
          gfortran --version

          echo "Git version: $(git --version)"
          echo "Logical Processors available: $(nproc --all)"

      # TODO: We shouldn't be using a cache on actual release branches, but it
      # really helps for iteration time.
      - name: Enable cache
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ${{ env.CACHE_DIR }}
          key: windows-build-packages-v4-${{ inputs.amdgpu_families }}-${{ github.sha }}
          restore-keys: |
            windows-build-packages-v4-${{ inputs.amdgpu_families }}-

      - name: Fetch sources
        timeout-minutes: 30
        run: |
          git config fetch.parallel 10
          git config --global core.symlinks true
          git config --global core.longpaths true
          python ./build_tools/fetch_sources.py --jobs 12

      - name: Override hipBLASLt files (post-fetch)
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          set -euxo pipefail
          echo "WORKSPACE=$GITHUB_WORKSPACE"
          pwd

          # Expected roots
          HIPBLASLT_ROOT="$GITHUB_WORKSPACE/rocm-libraries/projects/hipblaslt"
          TENSILE_DIR="$HIPBLASLT_ROOT/tensilelite"
          EXTOPS_DST_DIR="$HIPBLASLT_ROOT/device-library/extops"

          echo "Expected HIPBLASLT_ROOT: $HIPBLASLT_ROOT"
          echo "Expected TENSILE_DIR   : $TENSILE_DIR"
          echo "Expected EXTOPS_DST_DIR: $EXTOPS_DST_DIR"

          # Fallback discovery if paths don't exist (layout drift)
          if [[ ! -d "$TENSILE_DIR" || ! -d "$EXTOPS_DST_DIR" ]]; then
            echo "::warning::Expected directories not found; attempting discovery…"
            # Find tensilelite
            if [[ ! -d "$TENSILE_DIR" ]]; then
              TENSILE_DIR="$(find "$GITHUB_WORKSPACE" -type d -path '*/projects/hipblaslt/tensilelite' | head -n 1 || true)"
              [[ -n "$TENSILE_DIR" ]] || { echo "::error::Could not locate 'tensilelite' dir"; exit 1; }
            fi
            # Find extops
            if [[ ! -d "$EXTOPS_DST_DIR" ]]; then
              EXTOPS_DST_DIR="$(find "$GITHUB_WORKSPACE" -type d -path '*/projects/hipblaslt/device-library/extops' | head -n 1 || true)"
              [[ -n "$EXTOPS_DST_DIR" ]] || { echo "::error::Could not locate 'device-library/extops' dir"; exit 1; }
            fi
            HIPBLASLT_ROOT="$(cd "$TENSILE_DIR/.." && pwd -P)"
            echo "Discovered HIPBLASLT_ROOT: $HIPBLASLT_ROOT"
            echo "Discovered TENSILE_DIR   : $TENSILE_DIR"
            echo "Discovered EXTOPS_DST_DIR: $EXTOPS_DST_DIR"
          fi

          # Sources (placed at repo root alongside your workflow)
          SRC_CREATE="$GITHUB_WORKSPACE/ExtOpCreateLibrary.py"
          SRC_MERGE="$GITHUB_WORKSPACE/ExtOpMergeLibrary.py"
          SRC_CMAKETEST="$GITHUB_WORKSPACE/CMakeListsTest.txt"

          # Destinations
          DST_CREATE="$TENSILE_DIR/ExtOpCreateLibrary.py"
          DST_MERGE="$TENSILE_DIR/ExtOpMergeLibrary.py"
          DST_CMAKE="$EXTOPS_DST_DIR/CMakeLists.txt"

          echo "Verifying sources exist…"
          [[ -f "$SRC_CREATE"    ]] || { echo "::error::Missing $SRC_CREATE"; exit 1; }
          [[ -f "$SRC_MERGE"     ]] || { echo "::error::Missing $SRC_MERGE"; exit 1; }
          [[ -f "$SRC_CMAKETEST" ]] || { echo "::error::Missing $SRC_CMAKETEST"; exit 1; }

          echo "Copying overrides…"
          cp -f "$SRC_CREATE"    "$DST_CREATE"
          cp -f "$SRC_MERGE"     "$DST_MERGE"
          cp -f "$SRC_CMAKETEST" "$DST_CMAKE"

          echo "Verifying copies…"
          if command -v cmp >/dev/null 2>&1; then
            cmp -s "$SRC_CREATE" "$DST_CREATE"
            cmp -s "$SRC_MERGE"  "$DST_MERGE"
            cmp -s "$SRC_CMAKETEST" "$DST_CMAKE"
          else
            [[ $(wc -c <"$SRC_CREATE")    -eq $(wc -c <"$DST_CREATE")    ]]
            [[ $(wc -c <"$SRC_MERGE")     -eq $(wc -c <"$DST_MERGE")     ]]
            [[ $(wc -c <"$SRC_CMAKETEST") -eq $(wc -c <"$DST_CMAKE")     ]]
          fi

          echo "SHA256 of sources and destinations:"
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "$SRC_CREATE" "$DST_CREATE"
            sha256sum "$SRC_MERGE" "$DST_MERGE"
            sha256sum "$SRC_CMAKETEST" "$DST_CMAKE"
          elif command -v shasum >/dev/null 2>&1; then
            shasum -a 256 "$SRC_CREATE" "$DST_CREATE"
            shasum -a 256 "$SRC_MERGE"  "$DST_MERGE"
            shasum -a 256 "$SRC_CMAKETEST" "$DST_CMAKE"
          else
            # PowerShell fallback on Windows runners
            powershell.exe -NoProfile -Command \
              "Get-FileHash -Algorithm SHA256 @('$SRC_CREATE','$DST_CREATE','$SRC_MERGE','$DST_MERGE','$SRC_CMAKETEST','$DST_CMAKE') | ForEach-Object { Write-Host ($_.Path + ' ' + $_.Hash) }"
          fi

          echo "List destination dirs for sanity:"
          ls -la "$TENSILE_DIR"
          ls -la "$EXTOPS_DST_DIR"

      - name: Configure Projects
        env:
          amdgpu_families: ${{ inputs.amdgpu_families }}
          package_version: ${{ inputs.package_version }}
          extra_cmake_options: ${{ inputs.extra_cmake_options }}
        run: |
          # clear cache before build and after download
          ccache -z
          python3 build_tools/github_actions/build_configure.py

      - name: Build therock-dist
        env:
          PYTHONUNBUFFERED: "1"           
          HIPBLASLT_EXTOP_VERBOSE: "2"    
          TEATIME_FORCE_INTERACTIVE: "1"  
        run: cmake --build "${{ env.BUILD_DIR }}" --target therock-dist -- -v

      - name: Build therock-archives
        env:
          PYTHONUNBUFFERED: "1"           
          HIPBLASLT_EXTOP_VERBOSE: "2"    
          TEATIME_FORCE_INTERACTIVE: "1" 
        run: cmake --build "${{ env.BUILD_DIR }}" --target therock-archives -- -v

      - name: Report
        if: ${{ !cancelled() }}
        run: |
          echo "Build dir:"
          echo "------------"
          ls -lh "${{ env.BUILD_DIR }}"
          echo "Artifact Archives:"
          echo "------------------"
          ls -lh "${{ env.BUILD_DIR }}"/artifacts/*.tar.xz
          echo "Artifacts:"
          echo "----------"
          du -h -d 1 "${{ env.BUILD_DIR }}"/artifacts
          echo "CCache Stats:"
          echo "-------------"
          ccache -s

      - name: "Build size report"
        if: always()
        shell: powershell
        run: |
          $fs = Get-PSDrive -PSProvider "FileSystem"
          $fsout = $fs | Select-Object -Property Name,Used,Free,Root
          $fsout | % {$_.Used/=1GB;$_.Free/=1GB;$_} | Write-Host
          get-disk | Select-object @{Name="Size(GB)";Expression={$_.Size/1GB}} | Write-Host

      - name: Configure AWS Credentials for non-forked repos
        if: ${{ always() && !github.event.pull_request.head.repo.fork }}
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::692859939525:role/therock-artifacts

      - name: Post Build Upload
        if: always()
        run: |
          python3 build_tools/github_actions/post_build_upload.py \
            --run-id ${{ github.run_id }} \
            --amdgpu-family ${{ env.AMDGPU_FAMILIES }} \
            --build-dir ${{ env.BUILD_DIR }} \
            --upload

      - name: Save cache
        uses: actions/cache/save@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        if: ${{ !cancelled() }}
        with:
          path: ${{ env.CACHE_DIR }}
          key: windows-build-packages-v4-${{ inputs.amdgpu_families }}-${{ github.sha }}
